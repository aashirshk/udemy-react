// .commitlintrc.js
module.exports = {
  rules: {
    // @see: https://commitlint.js.org/#/reference-rules
    // "type-enum": [2, "always", typesEnum],
    // "scope-enum": [
    //   2,
    //   "always",
    //   [
    //     "ui-components",
    //     "ui-components/badge",
    //     "ui-components/button",
    //     "ui-components/tooltip",
    //     "core",
    //     "account",
    //     "plugins",
    //     "settings",
    //     "projects",
    //     "shared",
    //     "styles",
    //   ],
    // ],
    // "subject-empty": [2, "never"],
    // "subject-case": [2, "always", ["lower-case"]],
    // "header-max-length": [2, "always", 72],
  },
  prompt: {
    alias: { fd: "docs: :memo: fix typos" },
    messages: {
      type: "Select the type of change that you're committing:",
      scope: "Denote the SCOPE of this change (optional):",
      customScope: "Denote the SCOPE of this change:",
      subject: "Write a SHORT, IMPERATIVE tense description of the change:\n",
      body: 'Provide a LONGER description of the change (optional). Use "|" to break new line:\n',
      breaking:
        'List any BREAKING CHANGES (optional). Use "|" to break new line:\n',
      footerPrefixesSelect:
        "Select the ISSUES type of changeList by this change (optional):",
      customFooterPrefix: "Input ISSUES prefix:",
      footer: "List any ISSUES by this change. E.g.: #31, #34:\n",
      generatingByAI: "Generating your AI commit subject...",
      generatedSelectByAI: "Select suitable subject by AI generated:",
      confirmCommit: "Are you sure you want to proceed with the commit above?",
    },
    types: [
      {
        value: "initial",
        name: "initial:  üéâ  First commit to the git repo.",
        emoji: ":tada:",
      },
      {
        value: "feat",
        name: "feat:     ‚ú®  A new feature",
        emoji: ":sparkles:",
      },
      { value: "fix", name: "fix:      üêõ  A bug fix", emoji: ":bug:" },
      {
        value: "docs",
        name: "docs:     üìù  Documentation only changes",
        emoji: ":memo:",
      },
      {
        value: "style",
        name: "style:    üíÑ  Changes that do not affect the meaning of the code",
        emoji: ":lipstick:",
      },
      {
        value: "remove",
        name: "remove:    üóëÔ∏è  Removed a file or folder from the project.",
        emoji: ":wastebasket:",
      },
      {
        value: "refactor",
        name: "refactor: ‚ôªÔ∏è   A code change that neither fixes a bug nor adds a feature",
        emoji: ":recycle:",
      },
      {
        value: "perf",
        name: "perf:     ‚ö°Ô∏è  A code change that improves performance",
        emoji: ":zap:",
      },
      {
        value: "test",
        name: "test:     ‚úÖ  Adding missing tests or correcting existing tests",
        emoji: ":white_check_mark:",
      },
      {
        value: "build",
        name: "build:    üì¶Ô∏è   Changes that affect the build system or external dependencies",
        emoji: ":package:",
      },
      {
        value: "ci",
        name: "ci:       üé°  Changes to our CI configuration files and scripts",
        emoji: ":ferris_wheel:",
      },
      {
        value: "chore",
        name: "chore:    üî®  Other changes that don't modify src or test files",
        emoji: ":hammer:",
      },
      {
        value: "revert",
        name: "revert:   ‚è™Ô∏è  Reverts a previous commit",
        emoji: ":rewind:",
      },
    ],
    useEmoji: true,
    emojiAlign: "center",
    useAI: false,
    aiNumber: 1,
    themeColorCode: "",
    scopes: [
      {
        value: "algorithms(Dart)",
        name: "algorithms(Dart): Algorithms written in dart langugage.",
      },
      {
        value: "algorithms(Python)",
        name: "algorithms(Python): Algorithms written in python langugage.",
      },
      {
        value: "commitlintrc",
        name: "commitlintrc: Configuration file for git commit.",
      },
    ],
    enableMultipleScopes: true,
    scopeEnumSeperator: ",",
    allowCustomScopes: true,
    allowEmptyScopes: true,
    customScopesAlign: "bottom",
    customScopesAlias: "custom",
    emptyScopesAlias: "empty",
    upperCaseSubject: false,
    markBreakingChangeMode: false,
    allowBreakingChanges: ["feat", "fix"],
    breaklineNumber: 100,
    breaklineChar: "|",
    skipQuestions: [],
    issuePrefixes: [
      { value: "closed", name: "closed:   ISSUES has been processed" },
    ],
    customIssuePrefixAlign: "top",
    emptyIssuePrefixAlias: "skip",
    customIssuePrefixAlias: "custom",
    allowCustomIssuePrefix: true,
    allowEmptyIssuePrefix: true,
    confirmColorize: true,
    maxHeaderLength: Infinity,
    maxSubjectLength: Infinity,
    minSubjectLength: 0,
    scopeOverrides: undefined,
    defaultBody: "",
    defaultIssues: "",
    defaultScope: "",
    defaultSubject: "",
  },
};
